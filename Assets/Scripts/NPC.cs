// NPC.cs (debug-enhanced)
using UnityEngine;

public class NPC : MonoBehaviour
{
    [Header("UI")]
    [SerializeField] private GameObject dialoguePanel;

    [Header("Chat (optional)")]
    [SerializeField] private NpcChatSpeaker chatSpeaker; // g·∫Øn component n√†y n·∫øu mu·ªën NPC n√≥i

    [Header("Voice Recognition")]
    [SerializeField] private SpeechRecognitionTest speechRecognition;
    [SerializeField] private int recordSeconds = 5;

    [Header("Routine Settings")]
    [SerializeField] private bool useRoutineAI = true;

    private NPCRoutineAI routineAI;
    private bool isPlayerNearby = false;
    private bool isDialogueActive = false;
    private bool isPlayerSpeaking = false;
    private bool isNpcSpeaking = false;

    private void Start()
    {
        if (dialoguePanel != null)
        {
            dialoguePanel.SetActive(false);
            Debug.Log($"üß© {name}: dialoguePanel ƒë∆∞·ª£c g√°n v√† ƒëang ·∫©n khi kh·ªüi ƒë·ªông.");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è {name}: dialoguePanel CH∆ØA ƒë∆∞·ª£c g√°n trong Inspector!");
        }

        if (useRoutineAI)
        {
            SetupRoutineAI();
        }

        // üü¢ Ki·ªÉm tra Collider2D
        Collider2D[] cols = GetComponents<Collider2D>();
        foreach (var c in cols)
        {
            Debug.Log($"üîç {name}: Ph√°t hi·ªán collider lo·∫°i {c.GetType().Name}, IsTrigger={c.isTrigger}, Layer={LayerMask.LayerToName(gameObject.layer)}");
        }

        // üü¢ Ki·ªÉm tra Rigidbody2D
        Rigidbody2D rb = GetComponent<Rigidbody2D>();
        if (rb == null)
            Debug.LogError($"‚ùå {name}: Thi·∫øu Rigidbody2D ‚Üí OnTriggerEnter2D s·∫Ω KH√îNG ƒë∆∞·ª£c g·ªçi!");
        else
            Debug.Log($"‚úÖ {name}: Rigidbody2D h·ª£p l·ªá (BodyType={rb.bodyType}, Simulated={rb.simulated}, Layer={LayerMask.LayerToName(gameObject.layer)})");
    }

    void SetupRoutineAI()
    {
        routineAI = GetComponent<NPCRoutineAI>();
        if (routineAI == null)
        {
            routineAI = gameObject.AddComponent<NPCRoutineAI>();
            Debug.Log($"üß† {name}: ƒê√£ th√™m m·ªõi NPCRoutineAI component.");
        }

        routineAI.homeLocation = transform;
        routineAI.villageCenter = FindVillageCenter();
        routineAI.wanderRadius = 10f;

        if (NPCManager.Instance != null && routineAI.flowerPrefabs.Count == 0)
        {
            routineAI.flowerPrefabs = NPCManager.Instance.flowerPrefabs;
            Debug.Log($"üå∏ {name}: ƒê√£ l·∫•y danh s√°ch flowerPrefabs t·ª´ NPCManager.");
        }

        // Thi·∫øt l·∫≠p speech recognition n·∫øu c√≥
        if (speechRecognition == null)
        {
            speechRecognition = FindObjectOfType<SpeechRecognitionTest>();
            if (speechRecognition != null)
                Debug.Log($"üé§ {name}: T√¨m th·∫•y SpeechRecognitionTest.");
        }
    }

    Transform FindVillageCenter()
    {
        if (NPCManager.Instance != null && NPCManager.Instance.villageCenter != null)
        {
            Debug.Log($"üèòÔ∏è {name}: L·∫•y villageCenter t·ª´ NPCManager.");
            return NPCManager.Instance.villageCenter;
        }

        GameObject obj = GameObject.FindWithTag("VillageCenter");
        if (obj != null)
        {
            Debug.Log($"üèòÔ∏è {name}: L·∫•y villageCenter theo tag.");
            return obj.transform;
        }

        Debug.LogWarning($"‚ö†Ô∏è {name}: Kh√¥ng t√¨m th·∫•y VillageCenter, t·∫°o t·∫°m t·∫°i v·ªã tr√≠ hi·ªán t·∫°i.");
        GameObject center = new GameObject("VillageCenter");
        center.transform.position = transform.position;
        return center.transform;
    }

    // ================== TRIGGER ==================

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("Player")) TriggerDialogueEnter();
    }

    private void OnTriggerExit2D(Collider2D other)
    {
        if (other.CompareTag("Player")) TriggerDialogueExit();
    }


    // ================== CHAT ==================

    public void Say(string userText)
    {
        Debug.Log($"üó£Ô∏è {name}: Say() ƒë∆∞·ª£c g·ªçi v·ªõi input: \"{userText}\"");

        if (!string.IsNullOrWhiteSpace(userText) && chatSpeaker != null)
        {
            isPlayerSpeaking = false;
            isNpcSpeaking = true;
            Debug.Log($"üîá {name}: Ng∆∞·ªùi ch∆°i n√≥i xong, NPC b·∫Øt ƒë·∫ßu tr·∫£ l·ªùi.");

            // Thi·∫øt l·∫≠p callback khi NPC n√≥i xong
            chatSpeaker.OnSpeakEnd = OnNpcFinishedSpeaking;

            chatSpeaker.SpeakFromText(userText);
            HandleChatbotIntegration(userText);
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è {name}: Say() b·ªã g·ªçi nh∆∞ng chatSpeaker ho·∫∑c userText r·ªóng!");
        }
    }

    void HandleChatbotIntegration(string userText)
    {
        if (routineAI == null) return;

        if (userText.ToLower().Contains("where") && userText.ToLower().Contains("flower"))
        {
            Debug.Log($"üåº {name}: T√¥i bi·∫øt m·ªôt n∆°i c√≥ nhi·ªÅu hoa ƒë·∫πp!");
        }

        string activityInfo = routineAI.GetCurrentActivityName();
        float gameTime = routineAI.GetCurrentGameTime();
        Debug.Log($"üïí {name}: Th√¥ng tin g·ª≠i chatbot ‚Üí {activityInfo} (gi·ªù {gameTime:F1})");
    }

    // Callback khi NPC n√≥i xong
    void OnNpcFinishedSpeaking()
    {
        isNpcSpeaking = false;
        isPlayerSpeaking = false; // üîß th√™m d√≤ng n√†y
        Debug.Log($"üé§ {name}: NPC n√≥i xong, m·ªü mic cho ng∆∞·ªùi ch∆°i ti·∫øp t·ª•c.");

        // M·ªü l·∫°i mic sau 0.5 gi√¢y ƒë·ªÉ ng∆∞·ªùi ch∆°i ti·∫øp t·ª•c n√≥i
        Invoke(nameof(StartListeningForPlayer), 0.5f);
    }


    // B·∫Øt ƒë·∫ßu l·∫Øng nghe ng∆∞·ªùi ch∆°i
    void StartListeningForPlayer()
    {
        if (isDialogueActive && !isPlayerSpeaking && !isNpcSpeaking)
        {
            if (speechRecognition != null)
            {
                Debug.Log($"üéôÔ∏è {name}: B·∫Øt ƒë·∫ßu l·∫Øng nghe ng∆∞·ªùi ch∆°i...");
                isPlayerSpeaking = true;

                // Thi·∫øt l·∫≠p callback khi nh·∫≠n ƒë∆∞·ª£c voice input
                speechRecognition.OnSpeechResult = OnPlayerSpeechReceived;
                speechRecognition.StartRecording();
            }
            else
            {
                Debug.LogWarning($"‚ö†Ô∏è {name}: SpeechRecognition kh√¥ng c√≥ s·∫µn!");
            }
        }
    }

    // X·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c speech t·ª´ ng∆∞·ªùi ch∆°i
    void OnPlayerSpeechReceived(string recognizedText)
    {
        if (!string.IsNullOrWhiteSpace(recognizedText))
        {
            Debug.Log($"üí¨ {name}: Ng∆∞·ªùi ch∆°i n√≥i: \"{recognizedText}\"");
            Say(recognizedText);
        }
        else
        {
            Debug.Log($"üîá {name}: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c speech, th·ª≠ l·∫°i sau 1 gi√¢y.");
            Invoke(nameof(StartListeningForPlayer), 1f);
        }
    }

    public string GetCurrentActivityInfo()
    {
        if (routineAI != null)
            return $"Hi·ªán t·∫°i t√¥i ƒëang {routineAI.GetCurrentActivityName()}. Gi·ªù l√† {Mathf.Floor(routineAI.GetCurrentGameTime())}.";
        return "T√¥i ƒëang l√†m c√¥ng vi·ªác c·ªßa m√¨nh.";
    }

    public bool IsAvailableForInteraction()
    {
        bool available = isPlayerNearby && !IsBusy();
        Debug.Log($"üîé {name}: IsAvailableForInteraction() ‚Üí {available}");
        return available;
    }

    bool IsBusy()
    {
        if (routineAI == null) return false;
        return routineAI.currentState == NPCState.GatheringFlower ||
               (!useRoutineAI && routineAI.currentState == NPCState.Socializing);
    }

    public void OnFlowerGathered(GameObject flower)
    {
        Debug.Log($"üå∏ {name}: OnFlowerGathered() g·ªçi v·ªõi {flower.name}");
        Animator anim = GetComponent<Animator>();
        if (anim != null) anim.SetTrigger("Happy");
    }
    private Transform player;

    private void Update()
    {
        if (player == null)
        {
            GameObject p = GameObject.FindWithTag("Player");
            if (p != null) player = p.transform;
            return;
        }

        float distance = Vector3.Distance(transform.position, player.position);
        bool wasNearby = isPlayerNearby;

        if (distance < 1.5f && !isPlayerNearby)
        {
            // Khi ng∆∞·ªùi ch∆°i b∆∞·ªõc v√†o v√πng h·ªôi tho·∫°i
            isPlayerNearby = true;
            TriggerDialogueEnter();
        }
        else if (distance >= 1.8f && isPlayerNearby)
        {
            // Khi ng∆∞·ªùi ch∆°i r·ªùi v√πng h·ªôi tho·∫°i
            isPlayerNearby = false;
            TriggerDialogueExit();
        }
    }
    public void TriggerDialogueEnter()
    {
        Debug.Log($"‚úÖ {name}: Player ƒë·∫øn g·∫ßn, b·∫Øt ƒë·∫ßu h·ªôi tho·∫°i.");
        if (dialoguePanel != null) dialoguePanel.SetActive(true);

        isDialogueActive = true;
        isPlayerSpeaking = false;
        isNpcSpeaking = false;

        if (routineAI != null && useRoutineAI)
            routineAI.PauseCurrentActivity();

        if (routineAI != null)
        {
            routineAI.currentState = NPCState.Idle;
            Animator anim = routineAI.GetComponent<Animator>();
            if (anim)
            {
                anim.SetBool("Walking", false);
                anim.SetBool("Idle", true);
            }
        }

        // NPC ch√†o h·ªèi tr∆∞·ªõc r·ªìi m·ªõi m·ªü mic cho ng∆∞·ªùi ch∆°i
        if (chatSpeaker != null)
        {
            Debug.Log($"üéôÔ∏è {name}: M·ªü mic cho ng∆∞·ªùi ch∆°i b·∫Øt ƒë·∫ßu n√≥i.");
            StartListeningForPlayer();
        }
    }

    public void TriggerDialogueExit()
    {
        Debug.Log($"üëã {name}: Player r·ªùi xa, ƒë√≥ng h·ªôi tho·∫°i.");
        if (dialoguePanel != null) dialoguePanel.SetActive(false);

        // D·ª´ng dialogue v√† thu h·ªìi mic
        isDialogueActive = false;
        isPlayerSpeaking = false;
        isNpcSpeaking = false;

        // D·ª´ng recording n·∫øu ƒëang ghi √¢m
        if (speechRecognition != null)
        {
            speechRecognition.StopRecording();
        }

        if (routineAI != null && useRoutineAI)
            routineAI.ResumeCurrentActivity();
    }


}
