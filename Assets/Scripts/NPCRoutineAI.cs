using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;


// Enum ƒë·ªãnh nghƒ©a c√°c ho·∫°t ƒë·ªông trong ng√†y
public enum NPCActivity
{
    Sleep,              // Ng·ªß (23:00 - 6:00)
    MorningRoutine,     // D·ªçn d·∫πp, ƒÉn s√°ng (6:00 - 8:00)
    FlowerHunting,     // ƒêi h√°i hoa (8:00 - 12:00)
    LunchBreak,        // Ngh·ªâ tr∆∞a ·ªü l√†ng (12:00 - 13:00)
    ExploreVillage,    // Lang thang g·∫∑p g·ª° l√†ng (13:00 - 17:00)
    EveningRoutine,    // N·∫•u ƒÉn, tr√≤ chuy·ªán (17:00 - 20:00)
    SocialTime,        // G·∫∑p g·ª° bu·ªïi t·ªëi (20:00 - 22:00)
    NightRoutine       // Chu·∫©n b·ªã ƒëi ng·ªß (22:00 - 23:00)
}

// Enum ƒë·ªãnh nghƒ©a tr·∫°ng th√°i NPC
public enum NPCState
{
    Idle,
    MovingToTarget,
    GatheringFlower,
    ReturningHome,
    Resting,
    Socializing
}

public class FlowerObject
{
    public GameObject gameObject;
    public bool isAvailable = true;
    public Vector3 position;

    public FlowerObject(GameObject obj)
    {
        gameObject = obj;
        position = obj.transform.position;
        isAvailable = true;
    }
}

public class NPCRoutineAI : MonoBehaviour
{
    [Header("Routine Settings")]
    public NPCActivity currentActivity = NPCActivity.FlowerHunting;
    public NPCState currentState = NPCState.GatheringFlower;

    [Header("Home/Village Settings")]
    public Transform homeLocation;     // V·ªã tr√≠ nh√†/CAMP
    public Transform villageCenter;   // Trung t√¢m l√†ng ƒë·ªÉ lang thang
    public float wanderRadius = 10f;    // B√°n k√≠nh lang thang ·ªü l√†ng

    [Header("Flower Gathering")]
    public List<GameObject> flowerPrefabs;
    public float flowerDetectionRadius = 5f; // ‚úÖ TƒÇNG t·ª´ 3f l√™n 5f
    public float gatheringTime = 3f;    // ‚úÖ GI·∫¢M t·ª´ 5s xu·ªëng 3s cho nhanh h∆°n
    public LayerMask flowerLayer;

    [Header("Movement Settings")]
    public float moveSpeed = 3.5f; // ‚úÖ TƒÇNG t·ª´ 2f l√™n 3.5f
    public float detectionRadius = 5f;
    [Header("Movement Direction")]
    public bool useOnlyHorizontalMovement = false; // Ch·ªâ ƒëi ngang/d·ªçc

    [Header("Time Settings")]
    public float dayDurationInMinutes = 24f; // 24 ph√∫t = 1 ng√†y game
    [Header("References")]
    public MapGenerator mapGenerator;

    // Internal variables
    private List<FlowerObject> availableFlowers = new List<FlowerObject>();
    private FlowerObject currentTargetFlower;
    private Vector3 currentTargetPosition;
    private Animator animator;
    private float currentGameTime = 8.5f; // ‚úÖ SET 8:30 AM ƒë·ªÉ test FlowerHunting ngay!
    private Coroutine activityCoroutine;
    private Coroutine gatheringCoroutine;

    // Pause/resume system
    private bool isPaused = false;
    private NPCActivity pausedActivity;
    private IEnumerator pausedCoroutine;

    // Singleton ƒë·ªÉ qu·∫£n l√Ω t·∫•t c·∫£ NPCs
    public static NPCRoutineAI Instance;



    void Start()
    {
        Rigidbody2D rb = GetComponent<Rigidbody2D>();
        if (rb)
        {
            rb.gravityScale = 0;
            rb.mass = 1;
            rb.constraints = RigidbodyConstraints2D.FreezeRotation;
            rb.collisionDetectionMode = CollisionDetectionMode2D.Continuous;
        }

        if (mapGenerator == null)
            mapGenerator = FindObjectOfType<MapGenerator>();

        animator = GetComponent<Animator>();
        InitializeFlowerHunter();
    }


    void LateUpdate()
    {
        if (currentState != NPCState.MovingToTarget && currentState != NPCState.GatheringFlower)
            ClampToMapBounds();
    }

    void FixedUpdate()
    {
        Rigidbody2D rb = GetComponent<Rigidbody2D>();
        if (rb == null) return;

        if (currentState == NPCState.MovingToTarget && currentTargetPosition != Vector3.zero)
        {
            Vector2 direction = ((Vector2)currentTargetPosition - rb.position);
            float distance = direction.magnitude;

            if (distance > 0.05f)
            {
                direction = direction.normalized;

                // üß± Check n·∫øu c√≥ v·∫≠t c·∫£n ngay ph√≠a tr∆∞·ªõc
                int obstacleMask = LayerMask.GetMask("Obstacle", "Water");
                RaycastHit2D hit = Physics2D.Raycast(rb.position, direction, 0.3f, obstacleMask);
                if (hit.collider == null)
                {
                    rb.velocity = direction * moveSpeed;
                }
                else
                {
                    rb.velocity = Vector2.zero;
                    Debug.Log($"üöß {name}: G·∫∑p v·∫≠t c·∫£n {hit.collider.name}");
                }

                // Xoay m·∫∑t ƒë√∫ng h∆∞·ªõng
                if (direction.x != 0 && transform.localScale.x != Mathf.Sign(direction.x))
                {
                    Vector3 scale = transform.localScale;
                    scale.x = Mathf.Sign(direction.x) * Mathf.Abs(scale.x);
                    transform.localScale = scale;
                }

                if (animator)
                {
                    animator.SetBool("Walking", true);
                    animator.SetBool("Idle", false);
                }
            }
            else
            {
                rb.velocity = Vector2.zero;
                if (animator)
                {
                    animator.SetBool("Walking", false);
                    animator.SetBool("Idle", true);
                }
            }
        }
    }




    void InitializeFlowerHunter()
    {
        // ‚úÖ REDUCE movement radius to prevent border running
        wanderRadius = 15f; // Gi·∫£m t·ª´ 20 xu·ªëng 15
        flowerDetectionRadius = 3f; // Gi·∫£m detection radius t·ª´ 5 xu·ªëng 3

        // ‚úÖ Validate Village Center
        if (villageCenter == null)
        {
            // Debug.LogWarning($"‚ö†Ô∏è Village Center NULL - using current position as center");
            villageCenter = transform;
        }

        // Debug.Log($"üìè Settings: WanderRadius={wanderRadius}, FlowerDetection={flowerDetectionRadius}");

        // ‚úÖ Simple flower hunting only - no time routines
        StartCoroutine(SimpleFlowerHunting());
    }

    // ‚úÖ ORIGINAL FINDER - KEEP ALL FLOWERS!
    FlowerObject FindNearestFlowerSimple()
    {
        if (mapGenerator == null)
            mapGenerator = FindObjectOfType<MapGenerator>();

        Vector3 mapCenter = new Vector3(mapGenerator.width / 2f, mapGenerator.height / 2f, 0);

        GameObject[] allFlowers = GameObject.FindGameObjectsWithTag("Flower");
        if (allFlowers == null || allFlowers.Length == 0)
        {
            // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Kh√¥ng t√¨m th·∫•y hoa n√†o trong scene!");
            return null;
        }

        GameObject nearestFlower = null;
        float minDistance = float.MaxValue;

        foreach (GameObject flower in allFlowers)
        {
            if (flower == null || !flower.activeInHierarchy)
                continue;

            Vector3 flowerPos = flower.transform.position;
            flowerPos.z = 0f;

            // ‚úÖ Gi·ªõi h·∫°n tuy·ªát ƒë·ªëi
            if (flowerPos.x < 0 || flowerPos.x > mapGenerator.width ||
                flowerPos.y < 0 || flowerPos.y > mapGenerator.height)
            {
                // Debug.LogWarning($"üö´ {gameObject.name}: B·ªè qua hoa '{flower.name}' (ngo√†i bi√™n map)");
                continue;
            }

            // ‚úÖ Gi·ªõi h·∫°n theo t√¢m map
            float distFromCenter = Vector3.Distance(flowerPos, mapCenter);
            if (distFromCenter > 90f)
            {
                // Debug.LogWarning($"üö´ {gameObject.name}: B·ªè qua hoa '{flower.name}' (xa t√¢m {distFromCenter:F1})");
                continue;
            }

            // ‚úÖ T√≠nh kho·∫£ng c√°ch NPC - hoa
            float distFromNPC = Vector3.Distance(transform.position, flowerPos);
            if (distFromNPC < minDistance)
            {
                minDistance = distFromNPC;
                nearestFlower = flower;
            }
        }

        if (nearestFlower != null)
        {
            // Debug.Log($"üéØ {gameObject.name}: T√¨m th·∫•y hoa '{nearestFlower.name}' t·∫°i {nearestFlower.transform.position:F2} (c√°ch NPC {minDistance:F2})");
            return new FlowerObject(nearestFlower);
        }

        // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Kh√¥ng c√≥ hoa n√†o h·ª£p l·ªá trong ph·∫°m vi!");
        return null;
    }





    // ‚úÖ SIMPLE FLOWER HUNTING - NO TIME ROUTINES!
    IEnumerator SimpleFlowerHunting()
    {
        // Debug.Log($"üå∏ {gameObject.name}: Simple Flower Hunting STARTED!");
        int loopCount = 0;

        while (true) // Ch·ªâ l√†m 1 vi·ªác: ƒëi v√† h√°i hoa
        {
            loopCount++;

            // Log m·ªói 10 v√≤ng ƒë·ªÉ // Debug
            if (loopCount % 600 == 1)
            {
                // Debug.Log($"üí≠ Loop {loopCount}: {gameObject.name} still hunting...");
            }

            // T√¨m b√¥ng hoa g·∫ßn nh·∫•t (simplified)
            FlowerObject nearestFlower = FindNearestFlowerSimple();

            if (nearestFlower != null)
            {
                // Debug.Log($"üéØ {gameObject.name}: Found flower '{nearestFlower.gameObject.name}' ‚Üí going there!");

                // Di chuy·ªÉn ƒë·∫øn hoa
                yield return StartCoroutine(MoveToPosition(nearestFlower.position));

                // Ki·ªÉm tra ƒë√£ ƒë·∫øn g·∫ßn ch∆∞a
                float distance = Vector3.Distance(transform.position, nearestFlower.position);
                if (distance <= flowerDetectionRadius)
                {
                    // Debug.Log($"‚úÖ {gameObject.name}: Reached flower - time to gather!");

                    // H√°i hoa
                    yield return StartCoroutine(GatherFlower(nearestFlower));

                    // Sau khi h√°i, short break
                    yield return new WaitForSeconds(2f);
                }
                else
                {
                    // Debug.LogWarning($"‚ö†Ô∏è Couldn't get close enough to flower (distance: {distance})");
                }
            }
            else
            {
                // Debug.Log($"üîç {gameObject.name}: No flowers found - wandering randomly...");

                // Random wandering
                Vector3 randomPoint = villageCenter.position +
                    new Vector3(Random.Range(-wanderRadius, wanderRadius), Random.Range(-wanderRadius, wanderRadius), 0f);

                yield return StartCoroutine(MoveToPosition(randomPoint));
            }

            // Short delay before next action
            yield return new WaitForSeconds(1f);
        }
    }



    void FixVillageCenter()
    {
        // ‚úÖ Validate Village Center BEFORE any logic runs
        if (villageCenter == null)
        {
            // Debug.LogError($"‚ùå CRITICAL: Village Center NULL in Inspector!");

            // Try find by tag
            GameObject villageObj = GameObject.FindWithTag("VillageCenter");
            if (villageObj != null)
            {
                villageCenter = villageObj.transform;
                // Debug.Log($"‚úÖ Found VillageCenter by tag: {villageObj.name} at {villageCenter.position}");
                return;
            }

            // If still null - create persistent one
            // Debug.LogWarning($"‚ö†Ô∏è Creating VillageCenter at NPC position: {transform.position}");
            GameObject newCenter = new GameObject("VillageCenter");
            newCenter.transform.position = transform.position;
            newCenter.tag = "VillageCenter";
            villageCenter = newCenter.transform;

            // Don't destroy on load
            DontDestroyOnLoad(newCenter);
        }
        else
        {
            // Debug.Log($"‚úÖ Village Center set: {villageCenter.name} at {villageCenter.position}");
        }

        // Also validate Home Location
        if (homeLocation == null)
        {
            // Debug.LogWarning($"‚ö†Ô∏è Home Location NULL, setting to NPC position");
            homeLocation = transform;
        }
    }

    void UpdateCurrentActivity()
    {
        float hour = currentGameTime;

        // ‚úÖ // Debug: Log current time and activity
        float lastLogTime = -999f;
        if (Time.time - lastLogTime > 5f) // Log m·ªói 5 gi√¢y
        {
            // Debug.Log($"‚è∞ NPC {name}: Game time {hour:F1}:00 ‚Üí Current activity: {currentActivity}");
            lastLogTime = Time.time;
        }

        if (hour >= 23f || hour < 6f)
            currentActivity = NPCActivity.Sleep;
        else if (hour >= 6f && hour < 8f)
            currentActivity = NPCActivity.MorningRoutine;
        else if (hour >= 8f && hour < 12f)
            currentActivity = NPCActivity.FlowerHunting;
        else if (hour >= 12f && hour < 13f)
            currentActivity = NPCActivity.LunchBreak;
        else if (hour >= 13f && hour < 17f)
            currentActivity = NPCActivity.ExploreVillage;
        else if (hour >= 17f && hour < 20f)
            currentActivity = NPCActivity.EveningRoutine;
        else if (hour >= 20f && hour < 22f)
            currentActivity = NPCActivity.SocialTime;
        else if (hour >= 22f && hour < 23f)
            currentActivity = NPCActivity.NightRoutine;
    }

    // === ACTIVITY ROUTINES ===

    IEnumerator SleepRoutine()
    {
        currentState = NPCState.Resting;

        // Di chuy·ªÉn v·ªÅ nh√† n·∫øu ch∆∞a ·ªü nh√†
        if (Vector3.Distance(transform.position, homeLocation.position) > 2f)
        {
            currentState = NPCState.MovingToTarget;
            yield return StartCoroutine(MoveToPosition(homeLocation.position));
        }

        // ƒê·ª©ng y√™n/ƒëi ng·ªß
        transform.rotation = Quaternion.LookRotation(Vector3.forward);
        if (animator) animator.SetTrigger("Sleep");

        while (currentActivity == NPCActivity.Sleep)
        {
            yield return new WaitForSeconds(1f);
        }
    }

    IEnumerator MorningRoutine()
    {
        currentState = NPCState.Resting;

        // D·ªçn d·∫πp g·∫ßn nh√†
        Vector3 cleanSpot = homeLocation.position + new Vector3(Random.Range(-2f, 2f), Random.Range(-2f, 2f), 0f);
        yield return StartCoroutine(MoveToPosition(cleanSpot));

        // ƒê√≥ng gi·∫£ l√†m vi·ªác nh√†
        if (animator) animator.SetTrigger("Clean");
        yield return new WaitForSeconds(2f);

        while (currentActivity == NPCActivity.MorningRoutine)
        {
            yield return new WaitForSeconds(1f);
        }
    }

    IEnumerator FlowerHuntingRoutine()
    {
        currentState = NPCState.Idle;
        int failedAttempts = 0;
        int flowersGathered = 0;
        int maxFlowersPerSession = 3; // Gi·ªõi h·∫°n s·ªë hoa m·ªói session

        // Debug.Log($"üå∏ {gameObject.name}: B·∫Øt ƒë·∫ßu FlowerHuntingRoutine!");

        while (currentActivity == NPCActivity.FlowerHunting && flowersGathered < maxFlowersPerSession)
        {
            // ‚úÖ Gi·∫£m log spam - ch·ªâ log quan tr·ªçng
            if (failedAttempts == 0 || failedAttempts % 3 == 0)
            {
                // Debug.Log($"üîç {gameObject.name}: T√¨m ki·∫øm b√¥ng hoa... (l·∫ßn th·ª≠ {failedAttempts + 1})");
            }

            FlowerObject nearestFlower = FindNearestAvailableFlower();

            if (nearestFlower != null)
            {
                failedAttempts = 0; // Reset counter khi t√¨m th·∫•y hoa
                float initialDistance = Vector3.Distance(transform.position, nearestFlower.position);

                // Debug.Log($"üéØ {gameObject.name}: T√¨m th·∫•y hoa '{nearestFlower.gameObject.name}' ·ªü kho·∫£ng c√°ch {initialDistance:F2}");

                currentState = NPCState.MovingToTarget;
                currentTargetFlower = nearestFlower;

                // ‚úÖ Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ hoa v·ªõi timeout
                bool reachedFlower = false;
                float moveTimeout = 10f; // 10 gi√¢y timeout
                float moveTimer = 0f;

                while (Vector3.Distance(transform.position, nearestFlower.position) > flowerDetectionRadius && moveTimer < moveTimeout)
                {
                    // Ki·ªÉm tra hoa v·∫´n t·ªìn t·∫°i
                    if (nearestFlower.gameObject == null)
                    {
                        // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Hoa b·ªã destroy trong l√∫c di chuy·ªÉn!");
                        break;
                    }

                    yield return StartCoroutine(MoveToPosition(nearestFlower.position));
                    moveTimer += Time.deltaTime;

                    // N·∫øu ƒë√£ ƒë·ªß g·∫ßn, break
                    if (Vector3.Distance(transform.position, nearestFlower.position) <= flowerDetectionRadius)
                    {
                        reachedFlower = true;
                        break;
                    }
                }

                // ‚úÖ Ki·ªÉm tra ƒë√£ ƒë·∫øn g·∫ßn hoa ch∆∞a
                float finalDistance = Vector3.Distance(transform.position, nearestFlower.position);
                if (reachedFlower || finalDistance <= flowerDetectionRadius * 1.5f)
                {
                    // Debug.Log($"‚úÖ {gameObject.name}: ƒê√£ ƒë·ªß g·∫ßn ƒë·ªÉ h√°i hoa!");
                    currentState = NPCState.GatheringFlower;

                    // Debug.Log($"üå∏ {gameObject.name}: B·∫Øt ƒë·∫ßu qu√° tr√¨nh h√°i hoa {nearestFlower.gameObject.name}");

                    yield return StartCoroutine(GatherFlower(nearestFlower));

                    // N·∫øu ƒë·∫øn ƒë∆∞·ª£c ƒë√¢y t·ª©c l√† gathering kh√¥ng b·ªã exception
                    bool gatheringSuccess = true;
                    flowersGathered++;
                    if (gatheringSuccess)
                    {
                        // Debug.Log($"‚úÖ {gameObject.name}: Ho√†n th√†nh h√°i hoa! T·ªïng s·ªë ƒë√£ h√°i: {flowersGathered}");
                        // ‚úÖ G·ªçi NPC ƒë·ªÉ nh·∫≠n flower gathered event
                        NPC npcComponent = GetComponent<NPC>();
                        if (npcComponent != null)
                        {
                            npcComponent.OnFlowerGathered(nearestFlower.gameObject);
                        }
                    }
                }
                else
                {
                    // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Kh√¥ng th·ªÉ ƒë·∫øn ƒë·ªß g·∫ßn hoa (kho·∫£ng c√°ch: {finalDistance:F2}, timeout: {moveTimer:F1}s)");
                    failedAttempts++;
                }

                currentTargetFlower = null;
            }
            else
            {
                failedAttempts++;

                // ‚úÖ Gi·∫£m log spam cho failed attempts
                if (failedAttempts % 3 == 0)
                {
                    // Debug.LogWarning($"‚ùå {gameObject.name}: Kh√¥ng t√¨m th·∫•y hoa n√†o (th·ª≠ {failedAttempts})");
                }

                // ‚úÖ T√¨m ki·∫øm random area nh∆∞ng gi·ªõi h·∫°n
                if (failedAttempts <= 5)
                {
                    Vector3 explorePoint = villageCenter.position +
                        new Vector3(Random.Range(-wanderRadius * 0.3f, wanderRadius * 0.3f),
                                    Random.Range(-wanderRadius * 0.3f, wanderRadius * 0.3f), 0f);

                    // ‚úÖ ƒê·∫£m b·∫£o kh√¥ng ƒëi qu√° xa
                    float maxDistance = 10f;
                    if (Vector3.Distance(villageCenter.position, explorePoint) > maxDistance)
                    {
                        explorePoint = villageCenter.position +
                            (explorePoint - villageCenter.position).normalized * maxDistance;
                    }

                    // ‚úÖ // Debug: Log explore point details
                    // Debug.Log($"üé≤ {gameObject.name}: Creating explore point");
                    // Debug.Log($"üèòÔ∏è VillageCenter: {villageCenter.position:F2}");
                    // Debug.Log($"üìè WanderRadius: {wanderRadius:F2}");
                    // Debug.Log($"üéØ Target Explore Point: {explorePoint:F2}");
                    // Debug.Log($"üìè Distance from VillageCenter: {Vector3.Distance(villageCenter.position, explorePoint):F2}");

                    yield return StartCoroutine(MoveToPosition(explorePoint));
                    yield return new WaitForSeconds(0.5f);
                }
                else
                {
                    // N·∫øu fail qu√° nhi·ªÅu l·∫ßn, k·∫øt th√∫c session
                    // Debug.Log($"üö´ {gameObject.name}: Qu√° nhi·ªÅu l·∫ßn th·ª≠ th·∫•t b·∫°i, k·∫øt th√∫c FlowerHunting");
                    break;
                }
            }

            // ‚úÖ Gi·∫£m delay ƒë·ªÉ t√¨m ki·∫øm nhanh h∆°n
            yield return new WaitForSeconds(0.2f);
        }

        // Debug.Log($"üèÅ {gameObject.name}: FlowerHuntingRoutine k·∫øt th√∫c (ƒê√£ h√°i {flowersGathered}/{maxFlowersPerSession} hoa)");
    }


    IEnumerator LunchBreakRoutine()
    {
        currentState = NPCState.Resting;
        currentState = NPCState.MovingToTarget;

        // Quay v·ªÅ l√†ng ƒë·ªÉ ƒÉn tr∆∞a
        yield return StartCoroutine(MoveToPosition(villageCenter.position));

        // ƒê·ª©ng y√™n ƒÉn
        transform.rotation = Quaternion.LookRotation(Vector3.forward);
        if (animator) animator.SetTrigger("Eat");
        yield return new WaitForSeconds(Random.Range(30f, 60f)); // 30-60 gi√¢y ƒÉn tr∆∞a

        while (currentActivity == NPCActivity.LunchBreak)
        {
            yield return new WaitForSeconds(1f);
        }
    }

    IEnumerator ExploreVillageRoutine()
    {
        currentState = NPCState.Idle;

        while (currentActivity == NPCActivity.ExploreVillage)
        {
            // Lang thang ng·∫´u nhi√™n quanh l√†ng
            Vector3 wanderPoint = villageCenter.position +
                new Vector3(Random.Range(-wanderRadius, wanderRadius), Random.Range(-wanderRadius, wanderRadius), 0f);

            currentState = NPCState.MovingToTarget;
            yield return StartCoroutine(MoveToPosition(wanderPoint));

            // D·ª´ng l·∫°i kho·∫£ng th·ªùi gian ng·∫Øn
            currentState = NPCState.Idle;
            yield return new WaitForSeconds(Random.Range(2f, 5f));

            yield return new WaitForSeconds(1f);
        }
    }

    IEnumerator EveningRoutine()
    {
        currentState = NPCState.Resting;
        currentState = NPCState.MovingToTarget;

        // Quay v·ªÅ nh√†/area trung t√¢m c·ªßa l√†ng
        yield return StartCoroutine(MoveToPosition(villageCenter.position));

        // N·∫•u ƒÉn/c√¥ng vi·ªác t·ªëi
        if (animator) animator.SetTrigger("Cook");
        yield return new WaitForSeconds(Random.Range(30f, 60f));

        while (currentActivity == NPCActivity.EveningRoutine)
        {
            yield return new WaitForSeconds(1f);
        }
    }

    IEnumerator SocialTimeRoutine()
    {
        currentState = NPCState.Socializing;

        // T√¨m NPCs kh√°c ƒë·ªÉ giao ti·∫øp
        NPCRoutineAI[] otherNPCs = FindObjectsOfType<NPCRoutineAI>()
            .Where(npc => npc != this && Vector3.Distance(transform.position, npc.transform.position) < 5f)
            .ToArray();

        if (otherNPCs.Length > 0)
        {
            // ƒêi ƒë·∫øn g·∫ßn NPC kh√°c
            NPCRoutineAI targetNPC = otherNPCs[Random.Range(0, otherNPCs.Length)];
            yield return StartCoroutine(MoveToPosition(targetNPC.transform.position + Vector3.back * 2f));

            // Giao ti·∫øp (xoay m·∫∑t v·ªÅ ph√≠a NPC kh√°c)
            transform.LookAt(targetNPC.transform.position);
            if (animator) animator.SetTrigger("Talk");

            yield return new WaitForSeconds(Random.Range(60f, 120f)); // 1-2 ph√∫t giao ti·∫øp
        }
        else
        {
            // Kh√¥ng c√≥ NPC n√†o, ƒëi lang thang
            Vector3 socialSpot = villageCenter.position + new Vector3(Random.Range(-3f, 3f), 0, Random.Range(-3f, 3f));
            yield return StartCoroutine(MoveToPosition(socialSpot));
            yield return new WaitForSeconds(Random.Range(30f, 60f));
        }

        while (currentActivity == NPCActivity.SocialTime)
        {
            yield return new WaitForSeconds(1f);
        }
    }

    IEnumerator NightRoutine()
    {
        currentState = NPCState.MovingToTarget;

        // Chu·∫©n b·ªã ƒëi ng·ªß - di chuy·ªÉn v·ªÅ khu v·ª±c g·∫ßn nh√†
        Vector3 prepArea = homeLocation.position + new Vector3(Random.Range(-3f, 3f), Random.Range(-3f, 3f), 0f);
        yield return StartCoroutine(MoveToPosition(prepArea));

        // ƒê·ª©ng y√™n/th·ª©c d·∫≠y
        transform.rotation = Quaternion.LookRotation(Vector3.forward);
        if (animator) animator.SetTrigger("Prepare");
        yield return new WaitForSeconds(Random.Range(30f, 60f));

        while (currentActivity == NPCActivity.NightRoutine)
        {
            yield return new WaitForSeconds(1f);
        }
    }

    // === FLOWER GATHERING LOGIC ===

    public IEnumerator ScanForFlowers()
    {
        while (true)
        {
            // T√¨m t·∫•t c·∫£ game objects ƒë∆∞·ª£c coi l√† "hoa"
            foreach (GameObject flower in GameObject.FindGameObjectsWithTag("Flower"))
            {
                AddFlowerIfNotExists(flower);
            }

            // C≈©ng t√¨m theo prefab list
            foreach (GameObject obj in GameObject.FindObjectsOfType<GameObject>())
            {
                foreach (GameObject flowerPrefab in flowerPrefabs)
                {
                    if (obj.name.Contains(flowerPrefab.name))
                    {
                        AddFlowerIfNotExists(obj);
                        if (!obj.CompareTag("Flower"))
                            obj.tag = "Flower";
                        break;
                    }
                }
            }

            // Lo·∫°i b·ªè nh·ªØng hoa ƒë√£ b·ªã h√°i
            availableFlowers.RemoveAll(flower => flower.gameObject == null || !flower.isAvailable);

            yield return new WaitForSeconds(5f); // Qu√©t m·ªói 5 gi√¢y
        }
    }

    void AddFlowerIfNotExists(GameObject flowerObj)
    {
        if (!availableFlowers.Any(f => f.gameObject == flowerObj))
        {
            availableFlowers.Add(new FlowerObject(flowerObj));
        }
    }

    FlowerObject FindNearestAvailableFlower()
    {
        // ‚úÖ Gi·∫£m log spam - ch·ªâ khi c·∫ßn
        if (currentState == NPCState.Idle)
        {
            if (Time.frameCount % 60 == 0) // Log m·ªói 1 gi√¢y thay v√¨ m·ªói l·∫ßn
            {
                // Debug.Log($"üîç {gameObject.name}: B·∫Øt ƒë·∫ßu t√¨m hoa g·∫ßn nh·∫•t...");
            }
        }

        // ‚úÖ Ki·ªÉm tra FlowerManager
        if (FlowerManager.Instance == null && Application.isPlaying)
        {
            if (currentState == NPCState.Idle)
            {
                // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: FlowerManager ch∆∞a s·∫µn s√†ng!");
            }
            return null;
        }

        // ‚úÖ T·∫°o danh s√°ch t·∫•t c·∫£ hoa c√≥ s·∫µn
        List<GameObject> allFlowers = new List<GameObject>();

        // Th√™m hoa t·ª´ FlowerManager
        if (FlowerManager.Instance != null)
        {
            allFlowers.AddRange(FlowerManager.Instance.GetAllFlowerObjects());
        }

        // Th√™m hoa theo tag
        GameObject[] taggedFlowers = GameObject.FindGameObjectsWithTag("Flower");
        foreach (var flower in taggedFlowers)
        {
            if (!allFlowers.Contains(flower))
                allFlowers.Add(flower);
        }

        // ‚úÖ L·ªçc hoa c√≤n t·ªìn t·∫°i v√† active
        allFlowers.RemoveAll(f => f == null || !f.activeInHierarchy);

        if (currentState == NPCState.Idle)
        {
            // Debug.Log($"üå∏ {gameObject.name}: T√¨m th·∫•y {allFlowers.Count} b√¥ng hoa trong scene");

            // ‚úÖ // Debug: Check for flowers at extreme positions
            foreach (GameObject flower in allFlowers.Take(5))
            {
                Vector3 pos = flower.transform.position;
                float distFromCenter = Vector3.Distance(pos, Vector3.zero);
                // Debug.Log($"üå∏ Flower '{flower.name}' at ({pos.x:F1}, {pos.y:F1}) - distance from center: {distFromCenter:F1}");

                if (distFromCenter > 50f)
                {
                    // Debug.LogError($"‚ö†Ô∏è FLOWER TOO FAR FROM CENTER! This may be causing NPC to run to border: {flower.name}");
                }
            }
        }

        if (allFlowers.Count == 0)
        {
            if (currentState == NPCState.Idle)
            {
                // Debug.Log($"‚ùå {gameObject.name}: Kh√¥ng t√¨m th·∫•y b√¥ng hoa n√†o");
            }
            return null;
        }

        // ‚úÖ T√¨m hoa g·∫ßn nh·∫•t v·ªõi logging t·ªëi thi·ªÉu
        GameObject nearestFlower = null;
        float minDistance = float.MaxValue;
        int totalChecked = 0;

        foreach (GameObject flower in allFlowers)
        {
            float distance = Vector3.Distance(transform.position, flower.transform.position);
            totalChecked++;

            // ‚úÖ Ch·ªâ log top 3 hoa g·∫ßn nh·∫•t ƒë·ªÉ gi·∫£m spam
            if (distance < minDistance || totalChecked <= 3)
            {
                if (distance < minDistance)
                {
                    minDistance = distance;
                    nearestFlower = flower;
                }

                if (totalChecked <= 3)
                {
                    // Debug.Log($"üìè {gameObject.name}: Ki·ªÉm tra hoa '{flower.name}' ·ªü kho·∫£ng c√°ch {distance:F2}");
                }
            }
        }

        if (nearestFlower == null)
        {
            // Debug.Log($"‚ùå {gameObject.name}: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c hoa g·∫ßn nh·∫•t");
            return null;
        }

        // ‚úÖ Important log - always show this
        // Debug.Log($"üéØ {gameObject.name}: T√¨m th·∫•y hoa g·∫ßn nh·∫•t '{nearestFlower.name}' ·ªü g·∫ßn nh·∫•t '{nearestFlower.name}' ·ªü kho·∫£ng c√°ch {minDistance:F2}");
        // Debug.Log($"üå∏ Flower Position: {nearestFlower.transform.position:F2}");

        // ‚úÖ Ki·ªÉm tra kho·∫£ng c√°ch h·ª£p l√Ω ƒë·ªÉ di chuy·ªÉn
        float maxDistance = flowerDetectionRadius * 4f; // TƒÉng t·∫ßm t√¨m l√™n 12f
        if (minDistance > maxDistance)
        {
            // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Hoa '{nearestFlower.name}' qu√° xa ({minDistance:F2} > {maxDistance})");
            return null;
        }

        return new FlowerObject(nearestFlower);
    }



    IEnumerator GatherFlower(FlowerObject flower)
    {
        if (!flower.isAvailable)
        {
            // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Kh√¥ng th·ªÉ h√°i hoa - hoa kh√¥ng available");
            yield break;
        }

        SpriteRenderer sr = GetComponent<SpriteRenderer>();
        if (sr != null)
            // Debug.Log($"üßç‚Äç‚ôÇÔ∏è {gameObject.name}: SpriteRenderer enabled = {sr.enabled}, color={sr.color}");

            // Debug.Log($"üå∏ {gameObject.name}: B·∫Øt ƒë·∫ßu h√°i hoa '{flower.gameObject.name}'");



            if (animator != null)
            {
                try { animator.SetTrigger("Gather"); }
                catch
                { // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Trigger Gather fail"); }
                }

                yield return StartCoroutine(GatheringTimer(flower));

                // Ki·ªÉm tra n·∫øu NPC b·ªã ·∫©n sprite trong l√∫c h√°i
                //         if (sr != null && !sr.enabled)
                //     // Debug.LogError($"‚ùå {gameObject.name}: SpriteRenderer b·ªã t·∫Øt trong l√∫c h√°i hoa!");
                // // else
                // //     // Debug.Log($"‚úÖ {gameObject.name}: SpriteRenderer v·∫´n hi·ªÉn th·ªã b√¨nh th∆∞·ªùng.");

                // //                 // Debug.Log($"‚úÖ {gameObject.name}: Ho√†n th√†nh vi·ªác h√°i hoa!");
            }


        IEnumerator GatheringTimer(FlowerObject flower)
        {
            float timer = 0f;
            float logInterval = 1f; // Log m·ªói 1 gi√¢y
            float lastLogTime = 0f;
            Vector3 lockedPos = transform.position;

            // Debug.Log($"‚è±Ô∏è {gameObject.name}: B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c h√°i hoa ({gatheringTime}s)");

            // Lock flower ngay khi b·∫Øt ƒë·∫ßu gathering
            flower.isAvailable = false;

            // ƒê·∫£m b·∫£o flower v·∫´n t·ªìn t·∫°i
            if (flower.gameObject == null)
            {
                // Debug.LogError($"‚ùå {gameObject.name}: Hoa ƒë√£ b·ªã destroy!");
                yield break;
            }

            while (timer < gatheringTime)
            {
                transform.position = lockedPos;

                float currentDistance = Vector3.Distance(transform.position, flower.position);
                if (currentDistance > flowerDetectionRadius * 2f)
                {
                    // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: NPC r·ªùi xa hoa ({currentDistance:F2}) ‚Äî c√≥ th·ªÉ r∆°i xu·ªëng?");
                    // Debug.Log($"üìç LockedPos={lockedPos}, CurrentPos={transform.position}");
                    yield break;
                }

                if (Mathf.Abs(transform.position.z) > 0.1f)
                {
                    // Debug.LogError($"‚ùå {gameObject.name}: Z b·ªã l·ªách kh·ªèi m·∫∑t ph·∫≥ng 2D ({transform.position.z:F3}) ‚Äî NPC c√≥ th·ªÉ bi·∫øn m·∫•t kh·ªèi camera!");
                    transform.position = new Vector3(transform.position.x, transform.position.y, 0f);
                }

                timer += Time.deltaTime;
                yield return null;
            }


            // Ho√†n th√†nh h√°i - hoa bi·∫øn m·∫•t
            if (flower.gameObject != null)
            {
                // Debug.Log($"üéâ {gameObject.name}: Ho√†n th√†nh h√°i hoa '{flower.gameObject.name}'!");

                if (animator)
                {
                    animator.SetTrigger("GatherComplete");
                }
                yield return new WaitForSeconds(0.5f); // Gi·∫£m delay

                // ‚úÖ G·ªçi FlowerManager ƒë·ªÉ qu·∫£n l√Ω respawn
                if (FlowerManager.Instance != null)
                {
                    // Debug.Log($"üîÑ {gameObject.name}: G·ª≠i hoa {flower.gameObject.name} cho FlowerManager ƒë·ªÉ x·ª≠ l√Ω");
                    StartCoroutine(DelayedRemoveFlower(flower.gameObject, 1.5f));

                }
                else
                {
                    // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: FlowerManager null, t·ª± h·ªßy hoa!");
                    Destroy(flower.gameObject, 0.1f);
                }

                // Debug.Log($"üå∏ NPC {gameObject.name} ƒë√£ h√°i hoa th√†nh c√¥ng t·∫°i {flower.position}");
            }
            else
            {
                // Debug.LogError($"‚ùå {gameObject.name}: Hoa kh√¥ng t·ªìn t·∫°i khi ho√†n th√†nh h√°i!");
            }
        }
        IEnumerator DelayedRemoveFlower(GameObject flower, float delay)
        {
            yield return new WaitForSeconds(delay);
            if (FlowerManager.Instance != null)
                FlowerManager.Instance.RemoveFlower(flower);
            else
                Destroy(flower);
        }
    }


    // === MOVEMENT LOGIC ===

    public IEnumerator MoveToPosition(Vector3 targetPos)
    {
        if (mapGenerator == null)
            mapGenerator = FindObjectOfType<MapGenerator>();

        targetPos.z = 0f;
        Rigidbody2D rb = GetComponent<Rigidbody2D>();
        if (!rb) yield break;

        currentTargetPosition = targetPos;
        currentState = NPCState.MovingToTarget;

        // üîç T√¨m ƒë∆∞·ªùng b·∫±ng A*
        List<Vector3> path = FindPath(transform.position, targetPos);
        if (path == null || path.Count == 0)
        {
            // Debug.LogWarning($"‚ö†Ô∏è {name}: Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng t·ªõi {targetPos}");
            yield break;
        }

        float moveTimeout = 15f;
        float elapsed = 0f;
        float targetStopDistance = 0.6f;  // ƒë·ªß g·∫ßn ƒë·ªÉ d·ª´ng s·ªõm
        float stopDistance = 0.1f;
        float repathCooldown = 0.3f;
        int obstacleMask = LayerMask.GetMask("Obstacle", "Water");
        int repathCount = 0;

        // Debug.Log($"üß≠ {name}: Path c√≥ {path.Count} ƒëi·ªÉm ‚Üí di chuy·ªÉn theo pathfinding");
        int index = 0;

        Animator anim = animator;
        Transform player = GameObject.FindWithTag("Player")?.transform;

        while (index < path.Count)
        {
            // üßç‚Äç‚ôÇÔ∏è N·∫øu ng∆∞·ªùi ch∆°i l·∫°i g·∫ßn ‚Üí d·ª´ng di chuy·ªÉn ƒë·ªÉ h·ªôi tho·∫°i
            if (player != null)
            {
                float distToPlayer = Vector3.Distance(transform.position, player.position);
                if (distToPlayer < 1.5f) // b√°n k√≠nh h·ªôi tho·∫°i
                {
                    // Debug.Log($"üí¨ {name}: D·ª´ng pathfinding v√¨ ng∆∞·ªùi ch∆°i l·∫°i g·∫ßn");
                    break;
                }
            }

            Vector3 nextPoint = path[index];
            nextPoint.z = 0f;
            Vector2 dir = ((Vector2)nextPoint - rb.position);
            float dist = dir.magnitude;

            if (dist > stopDistance)
            {
                dir = dir.normalized;

                // üß± Ki·ªÉm tra v·∫≠t c·∫£n
                RaycastHit2D hit = Physics2D.Raycast(rb.position, dir, moveSpeed * Time.fixedDeltaTime + 0.05f, obstacleMask);
                if (hit.collider != null)
                {
                    repathCount++;
                    // Debug.Log($"üöß {name}: G·∫∑p v·∫≠t c·∫£n {hit.collider.name} ‚Üí t√≠nh l·∫°i ƒë∆∞·ªùng ({repathCount})");

                    if (repathCount > 10)
                    {
                        // Debug.LogError($"üí• {name}: Repath qu√° 10 l·∫ßn ‚Äì h·ªßy di chuy·ªÉn!");
                        break;
                    }

                    yield return new WaitForSeconds(repathCooldown);
                    path = FindPath(transform.position, targetPos);
                    index = 0;
                    continue;
                }

                // üö∂ Di chuy·ªÉn t·ª´ng b∆∞·ªõc nh·ªè
                rb.MovePosition(rb.position + dir * moveSpeed * Time.fixedDeltaTime);

                // Xoay m·∫∑t
                if (dir.x != 0 && transform.localScale.x != Mathf.Sign(dir.x))
                {
                    Vector3 scale = transform.localScale;
                    scale.x = Mathf.Sign(dir.x) * Mathf.Abs(scale.x);
                    transform.localScale = scale;
                }

                // Animation
                if (anim)
                {
                    anim.SetBool("Walking", true);
                    anim.SetBool("Idle", false);
                }
            }
            else
            {
                index++;
            }

            // ‚úÖ D·ª´ng s·ªõm n·∫øu ƒë√£ ƒë·ªß g·∫ßn m·ª•c ti√™u
            float distToTarget = Vector3.Distance(rb.position, targetPos);
            if (distToTarget <= targetStopDistance)
            {
                // Debug.Log($"üèÅ {name}: ƒê√£ ƒë·ªß g·∫ßn m·ª•c ti√™u (‚âà{distToTarget:F2}) ‚Üí k·∫øt th√∫c di chuy·ªÉn s·ªõm");
                break;
            }

            // Timeout an to√†n
            elapsed += Time.fixedDeltaTime;
            if (elapsed > moveTimeout)
            {
                // Debug.LogWarning($"‚è∞ {name}: H·∫øt th·ªùi gian di chuy·ªÉn ({moveTimeout}s) ‚Üí d·ª´ng path");
                break;
            }

            yield return new WaitForFixedUpdate();
        }

        // üõë Khi ƒë·∫øn n∆°i ho·∫∑c d·ª´ng s·ªõm
        if (anim)
        {
            anim.SetBool("Walking", false);
            anim.SetBool("Idle", true);
        }

        rb.velocity = Vector2.zero;
        currentState = NPCState.Idle;
        currentTargetPosition = Vector3.zero;

        // Debug.Log($"‚úÖ {gameObject.name}: ƒê√£ d·ª´ng ho·∫∑c ƒë·∫øn m·ª•c ti√™u {targetPos}");
    }





    // === PAUSE/RESUME SYSTEM ===

    public void PauseCurrentActivity()
    {
        if (isPaused) return;
        isPaused = true;

        // Kh√¥ng StopAllCoroutines ‚Äî ch·ªâ t·∫°m d·ª´ng di chuy·ªÉn
        Rigidbody2D rb = GetComponent<Rigidbody2D>();
        if (rb != null)
        {
            rb.velocity = Vector2.zero;
            rb.angularVelocity = 0f;
        }

        currentState = NPCState.Idle;

        if (animator)
        {
            animator.SetBool("Walking", false);
            animator.SetBool("Idle", true);
        }
    }



    public void ResumeCurrentActivity()
    {
        if (!isPaused) return;
        isPaused = false;

        if (currentActivity == NPCActivity.FlowerHunting)
            StartCoroutine(SimpleFlowerHunting());
    }


    // === ACTIVITY MANAGEMENT ===

    IEnumerator StartActivity(NPCActivity activity)
    {
        // G·ªçi tr·ª±c ti·∫øp routine, kh√¥ng c·∫ßn l·ªìng StartCoroutine ·ªü ƒë√¢y
        yield return StartCoroutine(StartActivityInternal(activity));
    }


    IEnumerator StartActivityInternal(NPCActivity activity)
    {
        switch (activity)
        {
            case NPCActivity.Sleep:
                yield return StartCoroutine(SleepRoutine());
                break;
            case NPCActivity.MorningRoutine:
                yield return StartCoroutine(MorningRoutine());
                break;
            case NPCActivity.FlowerHunting:
                yield return StartCoroutine(FlowerHuntingRoutine());
                break;
            case NPCActivity.LunchBreak:
                yield return StartCoroutine(LunchBreakRoutine());
                break;
            case NPCActivity.ExploreVillage:
                yield return StartCoroutine(ExploreVillageRoutine());
                break;
            case NPCActivity.EveningRoutine:
                yield return StartCoroutine(EveningRoutine());
                break;
            case NPCActivity.SocialTime:
                yield return StartCoroutine(SocialTimeRoutine());
                break;
            case NPCActivity.NightRoutine:
                yield return StartCoroutine(NightRoutine());
                break;
        }
        yield break;
    }

    // === PAUSE/RESUME SYSTEM ===

    public string GetCurrentActivityName()
    {
        return currentActivity.ToString();
    }

    public float GetCurrentGameTime()
    {
        return currentGameTime;
    }

    void OnDrawGizmosSelected()
    {
        // V·∫Ω v√πng home
        if (homeLocation != null)
        {
            Gizmos.color = Color.blue;
            Gizmos.DrawWireSphere(homeLocation.position, 2f);
        }

        // V·∫Ω v√πng l√†ng
        if (villageCenter != null)
        {
            Gizmos.color = Color.green;
            Gizmos.DrawWireSphere(villageCenter.position, wanderRadius);
        }

        // V·∫Ω v√πng ph√°t hi·ªán hoa
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, flowerDetectionRadius);

        // V·∫Ω ƒë∆∞·ªùng ƒëi ƒë·∫øn m·ª•c ti√™u
        if (currentState == NPCState.MovingToTarget)
        {
            Gizmos.color = Color.red;
            Gizmos.DrawLine(transform.position, currentTargetPosition);
        }
    }
    void ClampToMapBounds()
    {
        if (mapGenerator == null) return;

        Vector3 pos = transform.position;

        // N·∫øu tilemap c·ªßa b·∫°n l√† 1:1 th√¨ ƒë·ªÉ nguy√™n;
        // n·∫øu m·ªói tile = 0.5f ho·∫∑c 2f, nh√¢n theo t·ªâ l·ªá scale.
        float maxX = mapGenerator.width;
        float maxY = mapGenerator.height;

        pos.x = Mathf.Clamp(pos.x, 0f, maxX);
        pos.y = Mathf.Clamp(pos.y, 0f, maxY);
        pos.z = 0f; // 2D gi·ªØ c·ªë ƒë·ªãnh Z

        transform.position = pos;
    }
    #region ===== PATHFINDING SUPPORT =====

    class Node
    {
        public Vector2Int pos;
        public float gCost, hCost;
        public Node parent;
        public float fCost => gCost + hCost;

        public Node(Vector2Int position) => pos = position;
    }

    List<Vector3> FindPath(Vector3 start, Vector3 end)
    {
        if (mapGenerator == null)
            mapGenerator = FindObjectOfType<MapGenerator>();

        Vector2Int startTile = new(Mathf.RoundToInt(start.x), Mathf.RoundToInt(start.y));
        Vector2Int endTile = new(Mathf.RoundToInt(end.x), Mathf.RoundToInt(end.y));

        List<Node> openList = new();
        HashSet<Vector2Int> closedSet = new();

        Node startNode = new(startTile);
        startNode.gCost = 0;
        startNode.hCost = Vector2Int.Distance(startTile, endTile);
        openList.Add(startNode);

        while (openList.Count > 0)
        {
            Node current = openList.OrderBy(n => n.fCost).First();

            if (current.pos == endTile)
                return ReconstructPath(current);

            openList.Remove(current);
            closedSet.Add(current.pos);

            foreach (Vector2Int neighbor in GetNeighbors(current.pos))
            {
                if (closedSet.Contains(neighbor)) continue;
                if (!IsWalkable(neighbor)) continue;

                float tentativeG = current.gCost + Vector2Int.Distance(current.pos, neighbor);

                Node neighborNode = openList.FirstOrDefault(n => n.pos == neighbor);
                if (neighborNode == null)
                {
                    neighborNode = new Node(neighbor);
                    neighborNode.parent = current;
                    neighborNode.gCost = tentativeG;
                    neighborNode.hCost = Vector2Int.Distance(neighbor, endTile);
                    openList.Add(neighborNode);
                }
                else if (tentativeG < neighborNode.gCost)
                {
                    neighborNode.parent = current;
                    neighborNode.gCost = tentativeG;
                }
            }
        }

        // Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng h·ª£p l·ªá!");
        return new List<Vector3>();
    }

    List<Vector3> ReconstructPath(Node endNode)
    {
        List<Vector3> path = new();
        Node current = endNode;
        while (current != null)
        {
            path.Add(new Vector3(current.pos.x + 0.5f, current.pos.y + 0.5f, 0));
            current = current.parent;
        }
        path.Reverse();
        return path;
    }

    IEnumerable<Vector2Int> GetNeighbors(Vector2Int tile)
    {
        yield return tile + Vector2Int.up;
        yield return tile + Vector2Int.down;
        yield return tile + Vector2Int.left;
        yield return tile + Vector2Int.right;
    }

    bool IsWalkable(Vector2Int tile)
    {
        if (tile.x < 0 || tile.x >= mapGenerator.width ||
            tile.y < 0 || tile.y >= mapGenerator.height)
            return false;

        Vector3 worldPos = new(tile.x + 0.5f, tile.y + 0.5f, 0);
        Collider2D hit = Physics2D.OverlapCircle(worldPos, 0.25f, LayerMask.GetMask("Obstacle", "Water"));
        return hit == null;
    }
    #endregion

}
